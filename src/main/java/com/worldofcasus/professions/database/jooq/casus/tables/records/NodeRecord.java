/*
 * This file is generated by jOOQ.
 */
package com.worldofcasus.professions.database.jooq.casus.tables.records;


import com.worldofcasus.professions.database.jooq.casus.tables.Node;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodeRecord extends UpdatableRecordImpl<NodeRecord> implements Record10<Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>casus.node.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>casus.node.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>casus.node.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>casus.node.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>casus.node.world</code>.
     */
    public void setWorld(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>casus.node.world</code>.
     */
    public String getWorld() {
        return (String) get(2);
    }

    /**
     * Setter for <code>casus.node.min_x</code>.
     */
    public void setMinX(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>casus.node.min_x</code>.
     */
    public Integer getMinX() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>casus.node.min_y</code>.
     */
    public void setMinY(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>casus.node.min_y</code>.
     */
    public Integer getMinY() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>casus.node.min_z</code>.
     */
    public void setMinZ(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>casus.node.min_z</code>.
     */
    public Integer getMinZ() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>casus.node.max_x</code>.
     */
    public void setMaxX(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>casus.node.max_x</code>.
     */
    public Integer getMaxX() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>casus.node.max_y</code>.
     */
    public void setMaxY(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>casus.node.max_y</code>.
     */
    public Integer getMaxY() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>casus.node.max_z</code>.
     */
    public void setMaxZ(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>casus.node.max_z</code>.
     */
    public Integer getMaxZ() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>casus.node.required_profession_id</code>.
     */
    public void setRequiredProfessionId(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>casus.node.required_profession_id</code>.
     */
    public Integer getRequiredProfessionId() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Integer, String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Node.NODE.ID;
    }

    @Override
    public Field<String> field2() {
        return Node.NODE.NAME;
    }

    @Override
    public Field<String> field3() {
        return Node.NODE.WORLD;
    }

    @Override
    public Field<Integer> field4() {
        return Node.NODE.MIN_X;
    }

    @Override
    public Field<Integer> field5() {
        return Node.NODE.MIN_Y;
    }

    @Override
    public Field<Integer> field6() {
        return Node.NODE.MIN_Z;
    }

    @Override
    public Field<Integer> field7() {
        return Node.NODE.MAX_X;
    }

    @Override
    public Field<Integer> field8() {
        return Node.NODE.MAX_Y;
    }

    @Override
    public Field<Integer> field9() {
        return Node.NODE.MAX_Z;
    }

    @Override
    public Field<Integer> field10() {
        return Node.NODE.REQUIRED_PROFESSION_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getWorld();
    }

    @Override
    public Integer component4() {
        return getMinX();
    }

    @Override
    public Integer component5() {
        return getMinY();
    }

    @Override
    public Integer component6() {
        return getMinZ();
    }

    @Override
    public Integer component7() {
        return getMaxX();
    }

    @Override
    public Integer component8() {
        return getMaxY();
    }

    @Override
    public Integer component9() {
        return getMaxZ();
    }

    @Override
    public Integer component10() {
        return getRequiredProfessionId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getWorld();
    }

    @Override
    public Integer value4() {
        return getMinX();
    }

    @Override
    public Integer value5() {
        return getMinY();
    }

    @Override
    public Integer value6() {
        return getMinZ();
    }

    @Override
    public Integer value7() {
        return getMaxX();
    }

    @Override
    public Integer value8() {
        return getMaxY();
    }

    @Override
    public Integer value9() {
        return getMaxZ();
    }

    @Override
    public Integer value10() {
        return getRequiredProfessionId();
    }

    @Override
    public NodeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public NodeRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public NodeRecord value3(String value) {
        setWorld(value);
        return this;
    }

    @Override
    public NodeRecord value4(Integer value) {
        setMinX(value);
        return this;
    }

    @Override
    public NodeRecord value5(Integer value) {
        setMinY(value);
        return this;
    }

    @Override
    public NodeRecord value6(Integer value) {
        setMinZ(value);
        return this;
    }

    @Override
    public NodeRecord value7(Integer value) {
        setMaxX(value);
        return this;
    }

    @Override
    public NodeRecord value8(Integer value) {
        setMaxY(value);
        return this;
    }

    @Override
    public NodeRecord value9(Integer value) {
        setMaxZ(value);
        return this;
    }

    @Override
    public NodeRecord value10(Integer value) {
        setRequiredProfessionId(value);
        return this;
    }

    @Override
    public NodeRecord values(Integer value1, String value2, String value3, Integer value4, Integer value5, Integer value6, Integer value7, Integer value8, Integer value9, Integer value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NodeRecord
     */
    public NodeRecord() {
        super(Node.NODE);
    }

    /**
     * Create a detached, initialised NodeRecord
     */
    public NodeRecord(Integer id, String name, String world, Integer minX, Integer minY, Integer minZ, Integer maxX, Integer maxY, Integer maxZ, Integer requiredProfessionId) {
        super(Node.NODE);

        setId(id);
        setName(name);
        setWorld(world);
        setMinX(minX);
        setMinY(minY);
        setMinZ(minZ);
        setMaxX(maxX);
        setMaxY(maxY);
        setMaxZ(maxZ);
        setRequiredProfessionId(requiredProfessionId);
    }
}
