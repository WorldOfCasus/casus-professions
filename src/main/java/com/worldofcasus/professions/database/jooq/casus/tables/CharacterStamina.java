/*
 * This file is generated by jOOQ.
 */
package com.worldofcasus.professions.database.jooq.casus.tables;


import com.worldofcasus.professions.database.jooq.casus.Casus;
import com.worldofcasus.professions.database.jooq.casus.Keys;
import com.worldofcasus.professions.database.jooq.casus.tables.records.CharacterStaminaRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharacterStamina extends TableImpl<CharacterStaminaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>casus.character_stamina</code>
     */
    public static final CharacterStamina CHARACTER_STAMINA = new CharacterStamina();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterStaminaRecord> getRecordType() {
        return CharacterStaminaRecord.class;
    }

    /**
     * The column <code>casus.character_stamina.character_id</code>.
     */
    public final TableField<CharacterStaminaRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>casus.character_stamina.stamina</code>.
     */
    public final TableField<CharacterStaminaRecord, Integer> STAMINA = createField(DSL.name("stamina"), SQLDataType.INTEGER.nullable(false), this, "");

    private CharacterStamina(Name alias, Table<CharacterStaminaRecord> aliased) {
        this(alias, aliased, null);
    }

    private CharacterStamina(Name alias, Table<CharacterStaminaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>casus.character_stamina</code> table reference
     */
    public CharacterStamina(String alias) {
        this(DSL.name(alias), CHARACTER_STAMINA);
    }

    /**
     * Create an aliased <code>casus.character_stamina</code> table reference
     */
    public CharacterStamina(Name alias) {
        this(alias, CHARACTER_STAMINA);
    }

    /**
     * Create a <code>casus.character_stamina</code> table reference
     */
    public CharacterStamina() {
        this(DSL.name("character_stamina"), null);
    }

    public <O extends Record> CharacterStamina(Table<O> child, ForeignKey<O, CharacterStaminaRecord> key) {
        super(child, key, CHARACTER_STAMINA);
    }

    @Override
    public Schema getSchema() {
        return Casus.CASUS;
    }

    @Override
    public UniqueKey<CharacterStaminaRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTER_STAMINA_PRIMARY;
    }

    @Override
    public List<UniqueKey<CharacterStaminaRecord>> getKeys() {
        return Arrays.<UniqueKey<CharacterStaminaRecord>>asList(Keys.KEY_CHARACTER_STAMINA_PRIMARY);
    }

    @Override
    public CharacterStamina as(String alias) {
        return new CharacterStamina(DSL.name(alias), this);
    }

    @Override
    public CharacterStamina as(Name alias) {
        return new CharacterStamina(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterStamina rename(String name) {
        return new CharacterStamina(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterStamina rename(Name name) {
        return new CharacterStamina(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
