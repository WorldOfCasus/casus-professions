/*
 * This file is generated by jOOQ.
 */
package com.worldofcasus.professions.database.jooq.casus.tables;


import com.worldofcasus.professions.database.jooq.casus.Casus;
import com.worldofcasus.professions.database.jooq.casus.Keys;
import com.worldofcasus.professions.database.jooq.casus.tables.records.CharacterProfessionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharacterProfession extends TableImpl<CharacterProfessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>casus.character_profession</code>
     */
    public static final CharacterProfession CHARACTER_PROFESSION = new CharacterProfession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterProfessionRecord> getRecordType() {
        return CharacterProfessionRecord.class;
    }

    /**
     * The column <code>casus.character_profession.character_id</code>.
     */
    public final TableField<CharacterProfessionRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>casus.character_profession.profession_id</code>.
     */
    public final TableField<CharacterProfessionRecord, Integer> PROFESSION_ID = createField(DSL.name("profession_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private CharacterProfession(Name alias, Table<CharacterProfessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private CharacterProfession(Name alias, Table<CharacterProfessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>casus.character_profession</code> table reference
     */
    public CharacterProfession(String alias) {
        this(DSL.name(alias), CHARACTER_PROFESSION);
    }

    /**
     * Create an aliased <code>casus.character_profession</code> table reference
     */
    public CharacterProfession(Name alias) {
        this(alias, CHARACTER_PROFESSION);
    }

    /**
     * Create a <code>casus.character_profession</code> table reference
     */
    public CharacterProfession() {
        this(DSL.name("character_profession"), null);
    }

    public <O extends Record> CharacterProfession(Table<O> child, ForeignKey<O, CharacterProfessionRecord> key) {
        super(child, key, CHARACTER_PROFESSION);
    }

    @Override
    public Schema getSchema() {
        return Casus.CASUS;
    }

    @Override
    public UniqueKey<CharacterProfessionRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTER_PROFESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<CharacterProfessionRecord>> getKeys() {
        return Arrays.<UniqueKey<CharacterProfessionRecord>>asList(Keys.KEY_CHARACTER_PROFESSION_PRIMARY);
    }

    @Override
    public CharacterProfession as(String alias) {
        return new CharacterProfession(DSL.name(alias), this);
    }

    @Override
    public CharacterProfession as(Name alias) {
        return new CharacterProfession(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterProfession rename(String name) {
        return new CharacterProfession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterProfession rename(Name name) {
        return new CharacterProfession(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
