/*
 * This file is generated by jOOQ.
 */
package com.worldofcasus.professions.database.jooq.casus.tables;


import com.worldofcasus.professions.database.jooq.casus.Casus;
import com.worldofcasus.professions.database.jooq.casus.Keys;
import com.worldofcasus.professions.database.jooq.casus.tables.records.NodeItemRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodeItem extends TableImpl<NodeItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>casus.node_item</code>
     */
    public static final NodeItem NODE_ITEM = new NodeItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeItemRecord> getRecordType() {
        return NodeItemRecord.class;
    }

    /**
     * The column <code>casus.node_item.id</code>.
     */
    public final TableField<NodeItemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>casus.node_item.node_id</code>.
     */
    public final TableField<NodeItemRecord, Integer> NODE_ID = createField(DSL.name("node_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>casus.node_item.item</code>.
     */
    public final TableField<NodeItemRecord, byte[]> ITEM = createField(DSL.name("item"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>casus.node_item.chance</code>.
     */
    public final TableField<NodeItemRecord, Integer> CHANCE = createField(DSL.name("chance"), SQLDataType.INTEGER.nullable(false), this, "");

    private NodeItem(Name alias, Table<NodeItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private NodeItem(Name alias, Table<NodeItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>casus.node_item</code> table reference
     */
    public NodeItem(String alias) {
        this(DSL.name(alias), NODE_ITEM);
    }

    /**
     * Create an aliased <code>casus.node_item</code> table reference
     */
    public NodeItem(Name alias) {
        this(alias, NODE_ITEM);
    }

    /**
     * Create a <code>casus.node_item</code> table reference
     */
    public NodeItem() {
        this(DSL.name("node_item"), null);
    }

    public <O extends Record> NodeItem(Table<O> child, ForeignKey<O, NodeItemRecord> key) {
        super(child, key, NODE_ITEM);
    }

    @Override
    public Schema getSchema() {
        return Casus.CASUS;
    }

    @Override
    public Identity<NodeItemRecord, Integer> getIdentity() {
        return (Identity<NodeItemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NodeItemRecord> getPrimaryKey() {
        return Keys.KEY_NODE_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<NodeItemRecord>> getKeys() {
        return Arrays.<UniqueKey<NodeItemRecord>>asList(Keys.KEY_NODE_ITEM_PRIMARY);
    }

    @Override
    public List<ForeignKey<NodeItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NodeItemRecord, ?>>asList(Keys.FK_NODE_ITEM_NODE_ID);
    }

    private transient Node _node;

    public Node node() {
        if (_node == null)
            _node = new Node(this, Keys.FK_NODE_ITEM_NODE_ID);

        return _node;
    }

    @Override
    public NodeItem as(String alias) {
        return new NodeItem(DSL.name(alias), this);
    }

    @Override
    public NodeItem as(Name alias) {
        return new NodeItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeItem rename(String name) {
        return new NodeItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeItem rename(Name name) {
        return new NodeItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, byte[], Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
